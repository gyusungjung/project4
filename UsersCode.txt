@host = http://localhost:4000/api/users

### 회원가입
POST {{host}}/signup
Content-Type: application/json

{
   "email": "example2@example.com",
   "password": "eXampLeP@ss",
   "passwordConfirm": "eXampLeP@ss",
   "name": "관리자"
}

----------------
project4\src\routers\users.router.js
```
import express from 'express';
import { UsersController } from '../controllers/users.controller.js';
import authMiddleware from '../middlewares/need-signin.middleware.js';

const router = express.Router();
const usersController = new UsersController();

// 회원가입
router.post('/signup', usersController.Signup);
//로그인
router.post('/auth', usersController.Signin);
//내 정보조회
router.get('/auth/me', authMiddleware, usersController.checkToken);

export default router;

```

-----------------
project4\src\controllers\users.controller.js
```
import { UsersService } from '../services/auth.service.js';

export class UsersController {
  usersService = new UsersService();
  Signup = async (req, res, next) => {
    try {
      const { email, nickname, password, confirmpassword } = req.body;

      const users = await this.usersService.Signup(
        email,
        nickname,
        password,
        confirmpassword,
      );

      return res
        .status(200)
        .json({ message: '회원가입이 완료되었습니다.', data: users });
    } catch (err) {
      next(err);
    }
  };

  Signin = async (req, res, next) => {
    try {
      const { email, password } = req.body;

      const authLogin = await this.usersService.Signin(email, password);

      return res.status(200).json({ token: `Bearer ${authLogin}` });
    } catch (err) {
      next(err);
    }
  };

  checkToken = async (req, res, next) => {
    try {
      const { email, nickname } = res.locals.user;

      return res.status(200).json({
        message: '토큰이 정상적입니다.',
        data: { email, nickname },
      });
    } catch (err) {
      next(err);
    }
  };
}

```


-----------------
project4\src\services\auth.service.js
```
import { UsersRepository } from '../repositories/users.repository.js';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';

export class UsersService {
  usersRepository = new UsersRepository();

  Signup = async (email, nickname, password, confirmpassword) => {
    const salt = bcrypt.genSaltSync(
      parseInt(process.env.PASSWORD_HASH_SALT_ROUNDS, 10),
    );
    const hash = bcrypt.hashSync(password, salt);

    //이메일 형식
    let regEmail =
      /^([0-9a-zA-Z_\.-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+){1,2}$/;
    //비밀번호 형식
    let pwRef = /^[a-zA-z0-9]{6,12}$/;

    //저장소에서 이메일 존재확인 불러오기
    const isExistEmail = await this.usersRepository.isExistEmail(email);

    //이메일 존재한다면
    if (isExistEmail) throw new Error('이미 사용중인 이메일입니다');

    //닉네임중복확인
    const isExistNickname = await this.usersRepository.isExistNickname(
      nickname,
    );
    if (isExistNickname) throw new Error('이미 사용중인 닉네임입니다');

    // 이메일 형식확인
    if (!regEmail.test(email))
      throw new Error('이메일 형식이 올바르지 않습니다');

    //패스워드 형식확인
    if (!pwRef.test(password))
      throw new Error('비밀번호 형식이 올바르지 않습니다');
    //패스워드 일치 확인
    if (password !== confirmpassword)
      throw new Error('비밀번호 확인이 일치하지 않습니다.');

    const users = await this.usersRepository.Signup(email, nickname, hash);

    return {
      email: users.email,
      nickname: users.nickname,
    };
  };

  Signin = async (email, password) => {
    const userInfo = await this.usersRepository.Signin(email);
    if (!userInfo) throw new Error('없는 사용자 이메일입니다');

    //패스워드검증
    //const userPassword = await this.usersRepository.Signin(password);
    const isPasswordCorrect = await bcrypt.compare(password, userInfo.password);

    if (!isPasswordCorrect) throw new Error('비밀번호를 다시 확인해주세요');

    const token = jwt.sign(
      { userId: userInfo.userId },
      process.env.JWT_ACCESS_TOKEN_SECRET,
      { expiresIn: '12h' },
    );
    res.header('Authorization', `Bearer ${token}`);
    return token;
  };
}

```



-----------------
project4\src\repositories\users.repository.js

```
import { prisma } from '../utils/prisma/index.js';

export class UsersRepository {
  Signup = async (email, nickname, hash) => {
    const signupUser = await prisma.users.create({
      data: {
        email,
        nickname,
        password: hash,
      },
    });
    return signupUser;
  };

  isExistEmail = async (email) => {
    const isExistEmail = await prisma.users.findUnique({
      where: { email },
    });

    return isExistEmail;
  };

  isExistNickname = async (nickname) => {
    const isExistNickname = await prisma.users.findUnique({
      where: { nickname },
    });
    return isExistNickname;
  };

  Signin = async (email, password) => {
    const Signin = await prisma.users.findUnique({
      where: {
        email,
      },
    });

    return Signin;
  };
}

```


-----------------
project4\prisma\schema.prisma
```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_HOST")
}

model Products {
  productId   Int      @id  @default(autoincrement()) @map("productId")
  userId      Int      @map("userId")
  title       String   @map("title")
  description String   @map("description") @db.Text
  status      String   @default("FOR_SALE") @map("status")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User        Users    @relation(fields: [userId], references: [userId])

  @@map("Products")
}


model Users {
  userId   Int      @id @default(autoincrement()) @map("userId")
  email    String   @unique @map("email")
  nickname String   @unique @map("nickname")
  password String   @map("password")
  name     String   @map("name") 
  

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Products   Products[]

  @@map("Users")
}
```
-------------------
project4\src\middlewares\need-signin.middleware.js
```
import { prisma } from '../utils/prisma/index.js';
import jwt from 'jsonwebtoken';

export default function authMiddleware(req, res, next) {
  const key = process.env.ACCESS_TOKEN_SECRET;
  const { authorization } = req.headers;
  const [authType, authToken] = (authorization ?? '').split(' ');

  console.log(authorization);

  // 인증 완료
  if (!authToken || authType !== 'Bearer') {
    res.status(401).send({
      errorMessage: '로그인 후 이용 가능한 기능입니다.',
    });
    return;
  }

  try {
    // 요청 헤더에 저장된 토큰(req.headers.authorization)과 비밀키
    const { userId } = jwt.verify(authToken, process.env.ACCESS_TOKEN_SECRET);
    prisma.users.findUnique({ where: { userId } }).then((user) => {
      res.locals.user = user;
      next();
    });
  } catch (error) {
    console.log(error);
    // 인증 실패
    // 유효시간이 초과된 경우
    if (error.name === 'TokenExpiredError') {
      return res.status(419).json({
        code: 419,
        message: '토큰이 만료되었습니다.',
      });
    }
    // 토큰의 비밀키가 일치하지 않는 경우
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        code: 401,
        message: '유효하지 않은 토큰입니다.',
      });
    }
  }
}
```

----------------------------
project4\src\middlewares\error-handler.middleware.js
```
export default function ErrorHandlingMiddleware(err, req, res, next) {
  console.log(err);

  res.status(500).json({ errorMessage: '서버 내부 에러가 발생했습니다.' });
}

```

------------
